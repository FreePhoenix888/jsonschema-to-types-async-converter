{
  "package": {
    "name": "@freephoenix888/jsonschema-to-types-async-converter",
    "version": "0.0.1-dev.0"
  },
  "data": [
    {
      "package": {
        "dependencyId": 0,
        "containValue": "SyncTextFile"
      },
      "id": 1
    },
    {
      "package": {
        "dependencyId": 1,
        "containValue": "TSX"
      },
      "id": 2
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "GeneratedFrom"
      },
      "id": 3
    },
    {
      "id": "runInsertHandlerCodeGenerated",
      "type": 1,
      "value": {
        "value": "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n({ require, deep, data: { newLink: convertLink } }) => __awaiter(void 0, void 0, void 0, function* () {\n    const logs = [];\n    const util = require('util');\n    const { JSONSchema7 } = require('json-schema');\n    const { createSerialOperations } = require('@deep-foundation/deeplinks/imports/gql');\n    const { DeepClient, SerialOperation, } = require('@deep-foundation/deeplinks/imports/client');\n    const { Link } = require('@deep-foundation/deeplinks/imports/minilinks');\n    try {\n        const result = yield main();\n        return {\n            result,\n            logs\n        };\n    }\n    catch (error) {\n        throw {\n            error: util.inspect(error),\n            logs\n        };\n    }\n    function main() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const util = require('util');\n            const DEFAULT_LOG_DEPTH = 3;\n            let logDepth = DEFAULT_LOG_DEPTH;\n            const config = yield getConfig();\n            logDepth = config.logDepth;\n            logs.push(util.inspect({ config }));\n            const jsonSchema = yield getJsonSchema({\n                logDepth\n            });\n        });\n    }\n    function getNamespacedLogger(namespace) {\n        return (message) => {\n            logs.push(`${namespace}: ${message}`);\n        };\n    }\n    function getJsonSchemaLink(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { logDepth } = param;\n            const log = getNamespacedLogger('getJsonSchemaLink');\n            const selectData = {\n                id: convertLink.to_id\n            };\n            log(util.inspect({ selectData }, { depth: logDepth }));\n            function onNotFound() {\n                return __awaiter(this, void 0, void 0, function* () {\n                    throw new Error(`Json schema is not found. Select with data ${JSON.stringify(selectData)} returned empty result`);\n                });\n            }\n            log(util.inspect({ onNotFound }, { depth: logDepth }));\n            const link = yield getLink({\n                selectData,\n                onNotFound\n            });\n            log(util.inspect({ link }, { depth: logDepth }));\n            return link;\n        });\n    }\n    function getJsonSchema(param) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { logDepth } = param;\n            const link = yield getJsonSchemaLink({\n                logDepth\n            });\n            const jsonSchema = (_a = link.value) === null || _a === void 0 ? void 0 : _a.value;\n            if (!jsonSchema) {\n                throw new Error(`##${link.id} must have value`);\n            }\n            return jsonSchema;\n        });\n    }\n    function getConfigLink(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { logDepth } = param;\n            const log = getNamespacedLogger('getConfigLink');\n            log(util.inspect({ param }, { depth: logDepth }));\n            const selectData = {\n                id: convertLink.from_id\n            };\n            log(util.inspect({ selectData }, { depth: logDepth }));\n            function onNotFound() {\n                return __awaiter(this, void 0, void 0, function* () {\n                    throw new Error(`Config link is not found. Select with data ${JSON.stringify(selectData)} returned empty result`);\n                });\n            }\n            log(util.inspect({ onNotFound }, { depth: logDepth }));\n            const link = yield getLink({\n                selectData,\n                onNotFound\n            });\n            log(util.inspect({ link }, { depth: logDepth }));\n            return link;\n        });\n    }\n    function getConfig(param) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { logDepth } = param;\n            const log = getNamespacedLogger('getConfig');\n            log(util.inspect({ param }, { depth: logDepth }));\n            const link = yield getConfigLink({\n                logDepth\n            });\n            log(util.inspect({ link }, { depth: logDepth }));\n            const config = (_a = link.value) === null || _a === void 0 ? void 0 : _a.value;\n            log(util.inspect({ config }, { depth: logDepth }));\n            if (!config) {\n                throw new Error(`##${link.id} must have value`);\n            }\n            const result = {\n                containerLinkId: config.containerLinkId,\n            };\n            log(util.inspect({ result }, { depth: logDepth }));\n            return result;\n        });\n    }\n    function getDefaultJsonSchemaConverter(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { logDepth } = param;\n            function defaultJsonSchemaConverter(param) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    const log = getNamespacedLogger('defaultJsonSchemaConverter');\n                    log(util.inspect({ param }, { depth: logDepth }));\n                    const serialOperations = [];\n                    const { deep, jsonSchema, containerLinkId, propertyConverter } = param;\n                    const { type } = jsonSchema;\n                    propertyConverter({\n                        jsonSchemaProperty,\n                        parentLinkId: rootLinkId\n                    });\n                });\n            }\n            return defaultJsonSchemaConverter;\n        });\n    }\n    function getDefaultPropertyConverter(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { logDepth } = param;\n            function defaultPropertyConverter(param) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    const log = getNamespacedLogger('defaultPropertyConverter');\n                    log(util.inspect({ param }, { depth: logDepth }));\n                    const { deep, jsonSchemaProperty, parentLinkId } = param;\n                    const serialOperations = [];\n                    if (Array.isArray(type) ? type.includes('object') : type === 'object') {\n                        const { properties, title } = jsonSchema;\n                        if (!properties) {\n                            return;\n                        }\n                        const reservedLinkIds = yield deep.reserve((properties.length + 1) * 3);\n                        const rootLinkId = reservedLinkIds.pop();\n                        const containLinkId = reservedLinkIds.pop();\n                        const typeTypeLinkId = yield deep.id(\"@deep-foundation/core\", \"Type\");\n                        const containTypeLinkId = yield deep.id(\"@deep-foundation/core\", \"Contain\");\n                        const rootTypeInsertSerialOperations = {\n                            type: 'insert',\n                            table: 'links',\n                            objects: {\n                                id: rootLinkId,\n                                type_id: typeTypeLinkId,\n                            }\n                        };\n                        serialOperations.push(rootTypeInsertSerialOperations);\n                        const containInsertSerialOperation = {\n                            type: 'insert',\n                            table: 'links',\n                            objects: {\n                                type_id: containTypeLinkId,\n                                from_id: containerLinkId,\n                                to_id: rootLinkId\n                            }\n                        };\n                        serialOperations.push(containInsertSerialOperation);\n                        const valueForContainInsertSerialOperation = {\n                            type: 'insert',\n                            table: 'strings',\n                            objects: {\n                                link_id: containLinkId,\n                                value: title\n                            }\n                        };\n                        serialOperations.push(valueForContainInsertSerialOperation);\n                        for (const [propertyName, property] of Object.entries(properties)) {\n                            yield propertyConverter({\n                                rootLinkId,\n                                jsonSchemaProperty\n                            });\n                        }\n                    }\n                    else if (Array.isArray(type) ? type.includes('array') : type === 'array') {\n                    }\n                    else if (Array.isArray(type) ? type.includes('string') : type === 'string') {\n                    }\n                    else if (Array.isArray(type) ? type.includes('number') : type === 'number') {\n                    }\n                });\n            }\n            return defaultPropertyConverter;\n        });\n    }\n    function getLink(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { selectData, onNotFound: onError } = param;\n            const { data: [linkConfig] } = yield deep.select(selectData);\n            if (!linkConfig) {\n                yield onError();\n            }\n            return linkConfig;\n        });\n    }\n});\n//# sourceMappingURL=module.js.map"
      }
    },
    {
      "id": "runInsertHandlerCode",
      "type": 2,
      "value": {
        "value": "import { DeepClient } from '@deep-foundation/deeplinks/imports/client';\nimport { Exp } from '@deep-foundation/deeplinks/imports/client';\nimport  { Link as LinkWithTypedParameter } from '@deep-foundation/deeplinks/imports/minilinks';\nimport { Octokit } from '@octokit/rest';\ntype Link = LinkWithTypedParameter<number>\n\nasync ({require, deep, data: {newLink: convertLink}}) => {\n   const logs: Array<string> = [];\n   const util = require('util');\n   const { JSONSchema7 } = require('json-schema');\n   const {createSerialOperations} = require('@deep-foundation/deeplinks/imports/gql')\n   const {\n      DeepClient,\n      SerialOperation,\n    } = require('@deep-foundation/deeplinks/imports/client');\n    const { Link } = require('@deep-foundation/deeplinks/imports/minilinks'); \n\n\n   try {\n      const result = await main();\n      return {\n         result,\n         logs\n      }\n   } catch (error) {\n      throw {\n         error: util.inspect(error),\n         logs\n      }\n   }\n\n\n   async function main() {\n      const util = require('util');\n      const DEFAULT_LOG_DEPTH = 3;\n      let logDepth = DEFAULT_LOG_DEPTH;\n      const config = await getConfig();\n      logDepth = config.logDepth;\n      logs.push(util.inspect({config}))\n      const jsonSchema = await getJsonSchema({\n         logDepth\n      }); \n   }\n\n\n   function getNamespacedLogger(namespace: string) {\n      return (message: string) => {\n         logs.push(`${namespace}: ${message}`)\n      }\n   }\n   \n   async function getJsonSchemaLink(param: {logDepth: number}) {\n      const {logDepth} = param;\n\n      const log = getNamespacedLogger('getJsonSchemaLink');\n      const selectData = {\n         id: convertLink.to_id\n      }\n      log(util.inspect({selectData}, {depth: logDepth}))\n      async function onNotFound() {\n         throw new Error(`Json schema is not found. Select with data ${JSON.stringify(selectData)} returned empty result`);\n      }\n      log(util.inspect({onNotFound}, {depth: logDepth}))\n      const link = await getLink({\n         selectData,\n         onNotFound\n      })\n      log(util.inspect({link}, {depth: logDepth}))\n      return link;\n   }\n\n   async function getJsonSchema(param: {logDepth: number}) {\n      const {logDepth} = param;\n      const link = await getJsonSchemaLink({\n         logDepth\n      })\n      const jsonSchema = link.value?.value;\n      if(!jsonSchema) {\n         throw new Error(`##${link.id} must have value`)\n      }\n      return jsonSchema;\n   }\n\n   async function getConfigLink(param: {logDepth: number}) {\n      const {logDepth} = param;\n      const log = getNamespacedLogger('getConfigLink');\n      log(util.inspect({param}, {depth: logDepth}))\n      const selectData = {\n         id: convertLink.from_id\n      }\n      log(util.inspect({selectData}, {depth: logDepth}))\n      async function onNotFound() {\n         throw new Error(`Config link is not found. Select with data ${JSON.stringify(selectData)} returned empty result`);\n      }\n      log(util.inspect({onNotFound}, {depth: logDepth}))\n      const link = await getLink({\n         selectData,\n         onNotFound\n      })\n      log(util.inspect({link}, {depth: logDepth}))\n      return link;\n   }\n\n   interface Config {\n      converter: JsonSchemaConverter,\n      logDepth: number,\n      containerLinkId: number,\n   }\n\n   async function getConfig(param: {logDepth: number}): Promise<Config> {\n      const {logDepth} = param;\n      const log = getNamespacedLogger('getConfig');\n      log(util.inspect({param}, {depth: logDepth}))\n      const link = await getConfigLink({\n         logDepth\n      })\n      log(util.inspect({link}, {depth: logDepth}))\n      const config = link.value?.value;\n      log(util.inspect({config}, {depth: logDepth}))\n      if(!config) {\n         throw new Error(`##${link.id} must have value`)\n      }\n      const result: Config = {\n         containerLinkId: config.containerLinkId,\n      }\n      log(util.inspect({result}, {depth: logDepth}))\n      return result;\n   }\n\n   interface PropertyConverterParam {\n      parentLinkId: number, \n      jsonSchemaProperty: object\n   }\n\n   type PropertyConverter = (param: PropertyConverterParam) => Promise<void>;\n\n   type JsonSchemaConverter = (jsonSchema: object) => Promise<void>;\n\n   interface JsonSchemaConverterParam {\n      deep: object,\n      jsonSchema: JSONSchema7,\n      containerLinkId: number,\n      propertyConverter: PropertyConverter,\n   }\n\n   async function getDefaultJsonSchemaConverter(param: {logDepth: number}) {\n      const {logDepth} = param;\n      async function defaultJsonSchemaConverter(param: JsonSchemaConverterParam) {\n         const log = getNamespacedLogger('defaultJsonSchemaConverter');\n         log(util.inspect({param}, {depth: logDepth}))\n         const serialOperations: Array<object> = [];\n         const {deep, jsonSchema, containerLinkId,propertyConverter} = param;\n         const {type} = jsonSchema;\n         \n         propertyConverter({\n            jsonSchemaProperty,\n            parentLinkId: rootLinkId\n         })\n      }\n      return defaultJsonSchemaConverter;\n   }\n\n   async function getDefaultPropertyConverter(param: {logDepth: number}) {\n      const {logDepth} = param;\n      async function defaultPropertyConverter(param: PropertyConverterParam) {\n         const log = getNamespacedLogger('defaultPropertyConverter');\n         log(util.inspect({param}, {depth: logDepth}))\n         const {deep, jsonSchemaProperty, parentLinkId} = param;\n         const serialOperations: Array<SerialOperation> = [];\n         if(Array.isArray(type) ? type.includes('object') : type === 'object') {\n            const {properties, title} = jsonSchema;\n            if(!properties) {\n               return;\n            }\n            // * 3 because we reserve id for Type, Contain, Value\n            const reservedLinkIds = await deep.reserve((properties.length + 1)*3);\n            const rootLinkId = reservedLinkIds.pop();\n            const containLinkId = reservedLinkIds.pop();\n            const typeTypeLinkId = await deep.id(\"@deep-foundation/core\", \"Type\")\n            const containTypeLinkId = await deep.id(\"@deep-foundation/core\", \"Contain\")\n            const rootTypeInsertSerialOperations = {\n               type: 'insert',\n               table: 'links',\n               objects: {\n                  id: rootLinkId,\n                  type_id: typeTypeLinkId,\n               }\n            }\n            serialOperations.push(rootTypeInsertSerialOperations);\n            const containInsertSerialOperation = {\n               type: 'insert',\n               table: 'links',\n               objects: {\n                  type_id: containTypeLinkId,\n               from_id: containerLinkId,\n               to_id: rootLinkId\n               }\n            };\n            serialOperations.push(containInsertSerialOperation);\n            const valueForContainInsertSerialOperation = {\n               type: 'insert',\n               table: 'strings',\n               objects: {\n                  link_id: containLinkId,\n                  value: title\n               }\n            }\n            serialOperations.push(valueForContainInsertSerialOperation);\n            for(const [propertyName, property] of Object.entries(properties)) {\n               await propertyConverter({\n                  rootLinkId,\n                  jsonSchemaProperty\n               })\n            } \n         } else if (Array.isArray(type) ? type.includes('array') : type === 'array') {\n   \n         } else if (Array.isArray(type) ? type.includes('string') : type === 'string') {\n   \n         } else if  (Array.isArray(type) ? type.includes('number') : type === 'number') {\n   \n         }\n      }\n      return defaultPropertyConverter\n   }\n\n\n   interface GetLinkParam {\n      selectData: object;\n      onNotFound: () => Promise<void>;\n   }\n\n   async function getLink(param: GetLinkParam) {\n      const {selectData, onNotFound: onError} = param;\n      const {data: [linkConfig]} = await deep.select(selectData)\n      if(!linkConfig) {\n         await onError()\n      }\n      return linkConfig;\n   }\n}"
      }
    },
    {
      "id": "runInsertHandlerCodeGeneratedFrom",
      "type": 3,
      "from": "runInsertHandlerCodeGenerated",
      "to": "runInsertHandlerCode"
    }
  ],
  "errors": [],
  "dependencies": [
    {
      "name": "@deep-foundation/core",
      "version": "0.0.2"
    },
    {
      "name": "@deep-foundation/tsx",
      "version": "0.0.3"
    }
  ]
}